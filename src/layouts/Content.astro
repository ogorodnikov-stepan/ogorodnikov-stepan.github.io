---
import '@fontsource-variable/inter';
import '@fontsource-variable/source-code-pro';
import '@styles/globals.css';

const { data } = Astro.props;
---
<!doctype html>
<html lang={data.lang}>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{data.title}</title>
	</head>
	<body class="flex flex-col items-center h-dvh w-dvw bg-background dark:bg-dot-white/[0.1] bg-dot-black/[0.1] text-foreground">
		<slot />
	</body >
</html>

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};

	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');
	document.documentElement.setAttribute('data-color-scheme', isDark  ? 'dark' : 'light');

	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>
